// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostTransactionHandlerFunc turns a function with the right signature into a post transaction handler
type PostTransactionHandlerFunc func(PostTransactionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostTransactionHandlerFunc) Handle(params PostTransactionParams) middleware.Responder {
	return fn(params)
}

// PostTransactionHandler interface for that can handle valid post transaction params
type PostTransactionHandler interface {
	Handle(PostTransactionParams) middleware.Responder
}

// NewPostTransaction creates a new http.Handler for the post transaction operation
func NewPostTransaction(ctx *middleware.Context, handler PostTransactionHandler) *PostTransaction {
	return &PostTransaction{Context: ctx, Handler: handler}
}

/*PostTransaction swagger:route POST /transaction postTransaction

PostTransaction post transaction API

*/
type PostTransaction struct {
	Context *middleware.Context
	Handler PostTransactionHandler
}

func (o *PostTransaction) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostTransactionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
