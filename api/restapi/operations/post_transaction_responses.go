// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/SArtemJ/serverFPTS/api/models"
)

// PostTransactionOKCode is the HTTP code returned for type PostTransactionOK
const PostTransactionOKCode int = 200

/*PostTransactionOK Transaction result

swagger:response postTransactionOK
*/
type PostTransactionOK struct {

	/*
	  In: Body
	*/
	Payload *models.PostTransactionOKBody `json:"body,omitempty"`
}

// NewPostTransactionOK creates PostTransactionOK with default headers values
func NewPostTransactionOK() *PostTransactionOK {

	return &PostTransactionOK{}
}

// WithPayload adds the payload to the post transaction o k response
func (o *PostTransactionOK) WithPayload(payload *models.PostTransactionOKBody) *PostTransactionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post transaction o k response
func (o *PostTransactionOK) SetPayload(payload *models.PostTransactionOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostTransactionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostTransactionBadRequestCode is the HTTP code returned for type PostTransactionBadRequest
const PostTransactionBadRequestCode int = 400

/*PostTransactionBadRequest Invalid transactionID

swagger:response postTransactionBadRequest
*/
type PostTransactionBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.PostTransactionBadRequestBody `json:"body,omitempty"`
}

// NewPostTransactionBadRequest creates PostTransactionBadRequest with default headers values
func NewPostTransactionBadRequest() *PostTransactionBadRequest {

	return &PostTransactionBadRequest{}
}

// WithPayload adds the payload to the post transaction bad request response
func (o *PostTransactionBadRequest) WithPayload(payload *models.PostTransactionBadRequestBody) *PostTransactionBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post transaction bad request response
func (o *PostTransactionBadRequest) SetPayload(payload *models.PostTransactionBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostTransactionBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostTransactionNotFoundCode is the HTTP code returned for type PostTransactionNotFound
const PostTransactionNotFoundCode int = 404

/*PostTransactionNotFound Not found

swagger:response postTransactionNotFound
*/
type PostTransactionNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.PostTransactionNotFoundBody `json:"body,omitempty"`
}

// NewPostTransactionNotFound creates PostTransactionNotFound with default headers values
func NewPostTransactionNotFound() *PostTransactionNotFound {

	return &PostTransactionNotFound{}
}

// WithPayload adds the payload to the post transaction not found response
func (o *PostTransactionNotFound) WithPayload(payload *models.PostTransactionNotFoundBody) *PostTransactionNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post transaction not found response
func (o *PostTransactionNotFound) SetPayload(payload *models.PostTransactionNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostTransactionNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostTransactionMethodNotAllowedCode is the HTTP code returned for type PostTransactionMethodNotAllowed
const PostTransactionMethodNotAllowedCode int = 405

/*PostTransactionMethodNotAllowed Invalid Method

swagger:response postTransactionMethodNotAllowed
*/
type PostTransactionMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.PostTransactionMethodNotAllowedBody `json:"body,omitempty"`
}

// NewPostTransactionMethodNotAllowed creates PostTransactionMethodNotAllowed with default headers values
func NewPostTransactionMethodNotAllowed() *PostTransactionMethodNotAllowed {

	return &PostTransactionMethodNotAllowed{}
}

// WithPayload adds the payload to the post transaction method not allowed response
func (o *PostTransactionMethodNotAllowed) WithPayload(payload *models.PostTransactionMethodNotAllowedBody) *PostTransactionMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post transaction method not allowed response
func (o *PostTransactionMethodNotAllowed) SetPayload(payload *models.PostTransactionMethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostTransactionMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostTransactionInternalServerErrorCode is the HTTP code returned for type PostTransactionInternalServerError
const PostTransactionInternalServerErrorCode int = 500

/*PostTransactionInternalServerError Internal server error

swagger:response postTransactionInternalServerError
*/
type PostTransactionInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.PostTransactionInternalServerErrorBody `json:"body,omitempty"`
}

// NewPostTransactionInternalServerError creates PostTransactionInternalServerError with default headers values
func NewPostTransactionInternalServerError() *PostTransactionInternalServerError {

	return &PostTransactionInternalServerError{}
}

// WithPayload adds the payload to the post transaction internal server error response
func (o *PostTransactionInternalServerError) WithPayload(payload *models.PostTransactionInternalServerErrorBody) *PostTransactionInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post transaction internal server error response
func (o *PostTransactionInternalServerError) SetPayload(payload *models.PostTransactionInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostTransactionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
