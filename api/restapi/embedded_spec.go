// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "#### FPTS API\n",
    "title": "FPTS",
    "version": "1.0.0"
  },
  "host": "some.fpts.lan",
  "basePath": "/",
  "paths": {
    "/transaction": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Source-Type"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/Transaction_object"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Transaction_response_200"
          },
          "400": {
            "$ref": "#/responses/Base_response_400"
          },
          "404": {
            "$ref": "#/responses/Base_response_404"
          },
          "405": {
            "$ref": "#/responses/Base_response_405"
          },
          "500": {
            "$ref": "#/responses/Base_response_500"
          }
        }
      }
    }
  },
  "definitions": {
    "Error_data": {
      "allOf": [
        {
          "type": "object",
          "required": [
            "message",
            "errors"
          ],
          "properties": {
            "errors": {
              "type": "string",
              "example": "error reason"
            },
            "message": {
              "type": "string",
              "example": "error name"
            }
          }
        }
      ]
    },
    "Response_object": {
      "title": "Response_object",
      "required": [
        "userGUID",
        "wallet"
      ],
      "properties": {
        "amount": {
          "description": "amount",
          "type": "string",
          "example": "10.15"
        },
        "state": {
          "description": "state",
          "type": "string",
          "example": "win"
        },
        "userGUID": {
          "description": "userGUID",
          "type": "string",
          "format": "uuid",
          "example": "05b342e7-e60f-43b0-bbd4-2c822df3e637"
        },
        "wallet": {
          "description": "wallet info",
          "type": "string",
          "example": "100.15"
        }
      }
    },
    "Success_data": {
      "allOf": [
        {
          "type": "object",
          "title": "Success_data",
          "required": [
            "message",
            "errors"
          ],
          "properties": {
            "message": {
              "type": "string",
              "example": "SUCCESS"
            }
          }
        }
      ]
    },
    "Transaction_object": {
      "title": "Transaction_object",
      "required": [
        "userGUID",
        "transactionID",
        "state",
        "amount"
      ],
      "properties": {
        "amount": {
          "description": "amount",
          "type": "string",
          "example": "10.15"
        },
        "state": {
          "description": "state",
          "type": "string",
          "example": "win"
        },
        "transactionID": {
          "description": "transactionID",
          "type": "string",
          "format": "uuid",
          "example": "a3190bfc-593c-49c4-95b1-82e91ec3d022"
        },
        "userGUID": {
          "description": "userGUID",
          "type": "string",
          "format": "uuid",
          "example": "05b342e7-e60f-43b0-bbd4-2c822df3e637"
        }
      }
    }
  },
  "parameters": {
    "Source-Type": {
      "type": "string",
      "description": "Source-Type",
      "name": "Source-Type",
      "in": "header",
      "required": true
    }
  },
  "responses": {
    "Base_response_400": {
      "description": "Invalid transactionID",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/Error_data"
          }
        ]
      }
    },
    "Base_response_404": {
      "description": "Not found",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/Error_data"
          }
        ]
      }
    },
    "Base_response_405": {
      "description": "Invalid Method",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/Error_data"
          }
        ]
      }
    },
    "Base_response_500": {
      "description": "Internal server error",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/Error_data"
          }
        ]
      }
    },
    "Transaction_response_200": {
      "description": "Transaction result",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/Success_data"
          },
          {
            "type": "object",
            "required": [
              "data"
            ],
            "properties": {
              "data": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/definitions/Response_object"
                  }
                ]
              }
            }
          }
        ]
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "#### FPTS API\n",
    "title": "FPTS",
    "version": "1.0.0"
  },
  "host": "some.fpts.lan",
  "basePath": "/",
  "paths": {
    "/transaction": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "description": "Source-Type",
            "name": "Source-Type",
            "in": "header",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postTransactionParamsBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction result",
            "schema": {
              "$ref": "#/definitions/postTransactionOKBody"
            }
          },
          "400": {
            "description": "Invalid transactionID",
            "schema": {
              "$ref": "#/definitions/postTransactionBadRequestBody"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/postTransactionNotFoundBody"
            }
          },
          "405": {
            "description": "Invalid Method",
            "schema": {
              "$ref": "#/definitions/postTransactionMethodNotAllowedBody"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/postTransactionInternalServerErrorBody"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error_data": {
      "allOf": [
        {
          "$ref": "#/definitions/errorDataAllOf0"
        }
      ]
    },
    "Response_object": {
      "title": "Response_object",
      "required": [
        "userGUID",
        "wallet"
      ],
      "properties": {
        "amount": {
          "description": "amount",
          "type": "string",
          "example": "10.15"
        },
        "state": {
          "description": "state",
          "type": "string",
          "example": "win"
        },
        "userGUID": {
          "description": "userGUID",
          "type": "string",
          "format": "uuid",
          "example": "05b342e7-e60f-43b0-bbd4-2c822df3e637"
        },
        "wallet": {
          "description": "wallet info",
          "type": "string",
          "example": "100.15"
        }
      }
    },
    "Success_data": {
      "allOf": [
        {
          "$ref": "#/definitions/successDataAllOf0"
        }
      ]
    },
    "Transaction_object": {
      "title": "Transaction_object",
      "required": [
        "userGUID",
        "transactionID",
        "state",
        "amount"
      ],
      "properties": {
        "amount": {
          "description": "amount",
          "type": "string",
          "example": "10.15"
        },
        "state": {
          "description": "state",
          "type": "string",
          "example": "win"
        },
        "transactionID": {
          "description": "transactionID",
          "type": "string",
          "format": "uuid",
          "example": "a3190bfc-593c-49c4-95b1-82e91ec3d022"
        },
        "userGUID": {
          "description": "userGUID",
          "type": "string",
          "format": "uuid",
          "example": "05b342e7-e60f-43b0-bbd4-2c822df3e637"
        }
      }
    },
    "errorDataAllOf0": {
      "type": "object",
      "required": [
        "message",
        "errors"
      ],
      "properties": {
        "errors": {
          "type": "string",
          "example": "error reason"
        },
        "message": {
          "type": "string",
          "example": "error name"
        }
      },
      "x-go-gen-location": "models"
    },
    "postTransactionBadRequestBody": {
      "allOf": [
        {
          "$ref": "#/definitions/Error_data"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "postTransactionInternalServerErrorBody": {
      "allOf": [
        {
          "$ref": "#/definitions/Error_data"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "postTransactionMethodNotAllowedBody": {
      "allOf": [
        {
          "$ref": "#/definitions/Error_data"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "postTransactionNotFoundBody": {
      "allOf": [
        {
          "$ref": "#/definitions/Error_data"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "postTransactionOKBody": {
      "allOf": [
        {
          "$ref": "#/definitions/Success_data"
        },
        {
          "$ref": "#/definitions/postTransactionOKBodyAllOf1"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "postTransactionOKBodyAllOf1": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/postTransactionOKBodyAllOf1Data"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postTransactionOKBodyAllOf1Data": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Response_object"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "postTransactionParamsBody": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Transaction_object"
        }
      ],
      "x-go-gen-location": "operations"
    },
    "successDataAllOf0": {
      "type": "object",
      "title": "Success_data",
      "required": [
        "message",
        "errors"
      ],
      "properties": {
        "message": {
          "type": "string",
          "example": "SUCCESS"
        }
      },
      "x-go-gen-location": "models"
    }
  },
  "parameters": {
    "Source-Type": {
      "type": "string",
      "description": "Source-Type",
      "name": "Source-Type",
      "in": "header",
      "required": true
    }
  },
  "responses": {
    "Base_response_400": {
      "description": "Invalid transactionID",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/Error_data"
          }
        ]
      }
    },
    "Base_response_404": {
      "description": "Not found",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/Error_data"
          }
        ]
      }
    },
    "Base_response_405": {
      "description": "Invalid Method",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/Error_data"
          }
        ]
      }
    },
    "Base_response_500": {
      "description": "Internal server error",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/Error_data"
          }
        ]
      }
    },
    "Transaction_response_200": {
      "description": "Transaction result",
      "schema": {
        "allOf": [
          {
            "$ref": "#/definitions/Success_data"
          },
          {
            "type": "object",
            "required": [
              "data"
            ],
            "properties": {
              "data": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/definitions/Response_object"
                  }
                ]
              }
            }
          }
        ]
      }
    }
  }
}`))
}
